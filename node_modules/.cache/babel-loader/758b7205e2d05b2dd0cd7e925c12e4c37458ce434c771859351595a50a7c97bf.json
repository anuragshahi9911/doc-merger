{"ast":null,"code":"import axios from'axios';import JSZip from'jszip';import{saveAs}from'file-saver';import PDFMerger from'pdf-merger-js';class FileMergerService{async mergeFiles(files,mergeType,onProgress){try{onProgress({percentage:0,message:'Starting file processing...'});// Download files first if they are URLs\nconst downloadedFiles=await this.downloadFiles(files,onProgress);onProgress({percentage:50,message:'Merging files...'});// Merge based on type\nlet mergedBlob;let fileName;switch(mergeType){case'pdf':const result=await this.mergePDFs(downloadedFiles);mergedBlob=result.blob;fileName=result.fileName;break;case'zip':const zipResult=await this.mergeAsZip(downloadedFiles);mergedBlob=zipResult.blob;fileName=zipResult.fileName;break;case'csv':const csvResult=await this.mergeCSVs(downloadedFiles);mergedBlob=csvResult.blob;fileName=csvResult.fileName;break;case'text':const textResult=await this.mergeTextFiles(downloadedFiles);mergedBlob=textResult.blob;fileName=textResult.fileName;break;default:throw new Error(\"Unsupported merge type: \".concat(mergeType));}onProgress({percentage:90,message:'Preparing download...'});// Save the merged file\nsaveAs(mergedBlob,fileName);onProgress({percentage:100,message:'Download started!'});return{success:true};}catch(error){const errorMessage=error instanceof Error?error.message:'Unknown error occurred';return{success:false,error:errorMessage};}}async downloadFiles(files,onProgress){const downloadedFiles=[];const totalFiles=files.length;for(let i=0;i<files.length;i++){const file=files[i];const progressPercentage=Math.round(i/totalFiles*40);// 0-40% for downloads\nonProgress({percentage:progressPercentage,message:\"Downloading \".concat(file.name,\"...\")});if(file.type==='url'&&file.url){try{const response=await axios.get(file.url,{responseType:'arraybuffer',timeout:30000,// 30 second timeout\nheaders:{'Accept':'*/*'}});downloadedFiles.push({name:file.name,data:response.data});}catch(error){throw new Error(\"Failed to download \".concat(file.name,\": \").concat(error instanceof Error?error.message:'Unknown error'));}}else if(file.type==='upload'&&file.file){const arrayBuffer=await file.file.arrayBuffer();downloadedFiles.push({name:file.name,data:arrayBuffer,file:file.file});}}return downloadedFiles;}async mergePDFs(files){const merger=new PDFMerger();for(const file of files){if(file.data instanceof ArrayBuffer){await merger.add(new Uint8Array(file.data));}else if(file.file){// Convert File to ArrayBuffer first\nconst fileArrayBuffer=await file.file.arrayBuffer();await merger.add(new Uint8Array(fileArrayBuffer));}}const mergedPdfBuffer=await merger.saveAsBuffer();const blob=new Blob([mergedPdfBuffer],{type:'application/pdf'});return{blob,fileName:\"merged-\".concat(Date.now(),\".pdf\")};}async mergeAsZip(files){const zip=new JSZip();for(const file of files){if(file.data instanceof ArrayBuffer){zip.file(file.name,file.data);}else if(typeof file.data==='string'){zip.file(file.name,file.data);}}const zipBlob=await zip.generateAsync({type:'blob'});return{blob:zipBlob,fileName:\"merged-files-\".concat(Date.now(),\".zip\")};}async mergeCSVs(files){let mergedContent='';let headerAdded=false;for(const file of files){let content;if(file.data instanceof ArrayBuffer){content=new TextDecoder().decode(file.data);}else{content=file.data;}const lines=content.split('\\n').filter(line=>line.trim());if(lines.length===0)continue;if(!headerAdded){// Add header from first file\nmergedContent+=lines[0]+'\\n';headerAdded=true;// Add data rows from first file\nmergedContent+=lines.slice(1).join('\\n')+'\\n';}else{// Skip header, add only data rows from subsequent files\nmergedContent+=lines.slice(1).join('\\n')+'\\n';}}const blob=new Blob([mergedContent.trim()],{type:'text/csv'});return{blob,fileName:\"merged-data-\".concat(Date.now(),\".csv\")};}async mergeTextFiles(files){let mergedContent='';for(const file of files){let content;if(file.data instanceof ArrayBuffer){content=new TextDecoder().decode(file.data);}else{content=file.data;}mergedContent+=\"\\n\\n=== \".concat(file.name,\" ===\\n\\n\");mergedContent+=content;}const blob=new Blob([mergedContent.trim()],{type:'text/plain'});return{blob,fileName:\"merged-text-\".concat(Date.now(),\".txt\")};}// Utility method to validate file type\nvalidateFileType(fileName,expectedType){var _fileName$split$pop;const extension=((_fileName$split$pop=fileName.split('.').pop())===null||_fileName$split$pop===void 0?void 0:_fileName$split$pop.toLowerCase())||'';switch(expectedType){case'pdf':return extension==='pdf';case'zip':return['zip','rar','7z'].includes(extension);case'csv':return extension==='csv';case'text':return['txt','md','text'].includes(extension);default:return false;}}}export const fileMergerService=new FileMergerService();","map":{"version":3,"names":["axios","JSZip","saveAs","PDFMerger","FileMergerService","mergeFiles","files","mergeType","onProgress","percentage","message","downloadedFiles","downloadFiles","mergedBlob","fileName","result","mergePDFs","blob","zipResult","mergeAsZip","csvResult","mergeCSVs","textResult","mergeTextFiles","Error","concat","success","error","errorMessage","totalFiles","length","i","file","progressPercentage","Math","round","name","type","url","response","get","responseType","timeout","headers","push","data","arrayBuffer","merger","ArrayBuffer","add","Uint8Array","fileArrayBuffer","mergedPdfBuffer","saveAsBuffer","Blob","Date","now","zip","zipBlob","generateAsync","mergedContent","headerAdded","content","TextDecoder","decode","lines","split","filter","line","trim","slice","join","validateFileType","expectedType","_fileName$split$pop","extension","pop","toLowerCase","includes","fileMergerService"],"sources":["/Users/anurag.shahi/workstation/swiggy-repos/ads/pdf merger./src/services/fileMergerService.ts"],"sourcesContent":["import axios from 'axios';\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nimport PDFMerger from 'pdf-merger-js';\nimport { FileItem, MergeType, ProgressData } from '../App';\n\ninterface MergeResult {\n  success: boolean;\n  error?: string;\n}\n\nclass FileMergerService {\n  async mergeFiles(\n    files: FileItem[], \n    mergeType: MergeType, \n    onProgress: (progress: ProgressData) => void\n  ): Promise<MergeResult> {\n    try {\n      onProgress({ percentage: 0, message: 'Starting file processing...' });\n\n      // Download files first if they are URLs\n      const downloadedFiles = await this.downloadFiles(files, onProgress);\n      \n      onProgress({ percentage: 50, message: 'Merging files...' });\n\n      // Merge based on type\n      let mergedBlob: Blob;\n      let fileName: string;\n\n      switch (mergeType) {\n        case 'pdf':\n          const result = await this.mergePDFs(downloadedFiles);\n          mergedBlob = result.blob;\n          fileName = result.fileName;\n          break;\n        case 'zip':\n          const zipResult = await this.mergeAsZip(downloadedFiles);\n          mergedBlob = zipResult.blob;\n          fileName = zipResult.fileName;\n          break;\n        case 'csv':\n          const csvResult = await this.mergeCSVs(downloadedFiles);\n          mergedBlob = csvResult.blob;\n          fileName = csvResult.fileName;\n          break;\n        case 'text':\n          const textResult = await this.mergeTextFiles(downloadedFiles);\n          mergedBlob = textResult.blob;\n          fileName = textResult.fileName;\n          break;\n        default:\n          throw new Error(`Unsupported merge type: ${mergeType}`);\n      }\n\n      onProgress({ percentage: 90, message: 'Preparing download...' });\n\n      // Save the merged file\n      saveAs(mergedBlob, fileName);\n\n      onProgress({ percentage: 100, message: 'Download started!' });\n\n      return { success: true };\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n      return { success: false, error: errorMessage };\n    }\n  }\n\n  private async downloadFiles(\n    files: FileItem[], \n    onProgress: (progress: ProgressData) => void\n  ): Promise<Array<{ name: string; data: ArrayBuffer | string; file?: File }>> {\n    const downloadedFiles: Array<{ name: string; data: ArrayBuffer | string; file?: File }> = [];\n    const totalFiles = files.length;\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      const progressPercentage = Math.round((i / totalFiles) * 40); // 0-40% for downloads\n      \n      onProgress({ \n        percentage: progressPercentage, \n        message: `Downloading ${file.name}...` \n      });\n\n      if (file.type === 'url' && file.url) {\n        try {\n          const response = await axios.get(file.url, {\n            responseType: 'arraybuffer',\n            timeout: 30000, // 30 second timeout\n            headers: {\n              'Accept': '*/*',\n            }\n          });\n          downloadedFiles.push({\n            name: file.name,\n            data: response.data\n          });\n        } catch (error) {\n          throw new Error(`Failed to download ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        }\n      } else if (file.type === 'upload' && file.file) {\n        const arrayBuffer = await file.file.arrayBuffer();\n        downloadedFiles.push({\n          name: file.name,\n          data: arrayBuffer,\n          file: file.file\n        });\n      }\n    }\n\n    return downloadedFiles;\n  }\n\n  private async mergePDFs(files: Array<{ name: string; data: ArrayBuffer | string; file?: File }>): Promise<{ blob: Blob; fileName: string }> {\n    const merger = new PDFMerger();\n\n    for (const file of files) {\n      if (file.data instanceof ArrayBuffer) {\n        await merger.add(new Uint8Array(file.data));\n      } else if (file.file) {\n        // Convert File to ArrayBuffer first\n        const fileArrayBuffer = await file.file.arrayBuffer();\n        await merger.add(new Uint8Array(fileArrayBuffer));\n      }\n    }\n\n    const mergedPdfBuffer = await merger.saveAsBuffer();\n    const blob = new Blob([mergedPdfBuffer], { type: 'application/pdf' });\n    \n    return {\n      blob,\n      fileName: `merged-${Date.now()}.pdf`\n    };\n  }\n\n  private async mergeAsZip(files: Array<{ name: string; data: ArrayBuffer | string; file?: File }>): Promise<{ blob: Blob; fileName: string }> {\n    const zip = new JSZip();\n\n    for (const file of files) {\n      if (file.data instanceof ArrayBuffer) {\n        zip.file(file.name, file.data);\n      } else if (typeof file.data === 'string') {\n        zip.file(file.name, file.data);\n      }\n    }\n\n    const zipBlob = await zip.generateAsync({ type: 'blob' });\n    \n    return {\n      blob: zipBlob,\n      fileName: `merged-files-${Date.now()}.zip`\n    };\n  }\n\n  private async mergeCSVs(files: Array<{ name: string; data: ArrayBuffer | string; file?: File }>): Promise<{ blob: Blob; fileName: string }> {\n    let mergedContent = '';\n    let headerAdded = false;\n\n    for (const file of files) {\n      let content: string;\n      \n      if (file.data instanceof ArrayBuffer) {\n        content = new TextDecoder().decode(file.data);\n      } else {\n        content = file.data as string;\n      }\n\n      const lines = content.split('\\n').filter(line => line.trim());\n      \n      if (lines.length === 0) continue;\n\n      if (!headerAdded) {\n        // Add header from first file\n        mergedContent += lines[0] + '\\n';\n        headerAdded = true;\n        // Add data rows from first file\n        mergedContent += lines.slice(1).join('\\n') + '\\n';\n      } else {\n        // Skip header, add only data rows from subsequent files\n        mergedContent += lines.slice(1).join('\\n') + '\\n';\n      }\n    }\n\n    const blob = new Blob([mergedContent.trim()], { type: 'text/csv' });\n    \n    return {\n      blob,\n      fileName: `merged-data-${Date.now()}.csv`\n    };\n  }\n\n  private async mergeTextFiles(files: Array<{ name: string; data: ArrayBuffer | string; file?: File }>): Promise<{ blob: Blob; fileName: string }> {\n    let mergedContent = '';\n\n    for (const file of files) {\n      let content: string;\n      \n      if (file.data instanceof ArrayBuffer) {\n        content = new TextDecoder().decode(file.data);\n      } else {\n        content = file.data as string;\n      }\n\n      mergedContent += `\\n\\n=== ${file.name} ===\\n\\n`;\n      mergedContent += content;\n    }\n\n    const blob = new Blob([mergedContent.trim()], { type: 'text/plain' });\n    \n    return {\n      blob,\n      fileName: `merged-text-${Date.now()}.txt`\n    };\n  }\n\n  // Utility method to validate file type\n  validateFileType(fileName: string, expectedType: MergeType): boolean {\n    const extension = fileName.split('.').pop()?.toLowerCase() || '';\n    \n    switch (expectedType) {\n      case 'pdf':\n        return extension === 'pdf';\n      case 'zip':\n        return ['zip', 'rar', '7z'].includes(extension);\n      case 'csv':\n        return extension === 'csv';\n      case 'text':\n        return ['txt', 'md', 'text'].includes(extension);\n      default:\n        return false;\n    }\n  }\n}\n\nexport const fileMergerService = new FileMergerService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}